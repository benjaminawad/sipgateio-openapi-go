/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SetUserRoleRequest struct for SetUserRoleRequest
type SetUserRoleRequest struct {
	Admin *bool `json:"admin,omitempty"`
}

// NewSetUserRoleRequest instantiates a new SetUserRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetUserRoleRequest() *SetUserRoleRequest {
	this := SetUserRoleRequest{}
	var admin bool = false
	this.Admin = &admin
	return &this
}

// NewSetUserRoleRequestWithDefaults instantiates a new SetUserRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetUserRoleRequestWithDefaults() *SetUserRoleRequest {
	this := SetUserRoleRequest{}
	var admin bool = false
	this.Admin = &admin
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *SetUserRoleRequest) GetAdmin() bool {
	if o == nil || o.Admin == nil {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetUserRoleRequest) GetAdminOk() (*bool, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *SetUserRoleRequest) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *SetUserRoleRequest) SetAdmin(v bool) {
	o.Admin = &v
}

func (o SetUserRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	return json.Marshal(toSerialize)
}

type NullableSetUserRoleRequest struct {
	value *SetUserRoleRequest
	isSet bool
}

func (v NullableSetUserRoleRequest) Get() *SetUserRoleRequest {
	return v.value
}

func (v *NullableSetUserRoleRequest) Set(val *SetUserRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetUserRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetUserRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetUserRoleRequest(val *SetUserRoleRequest) *NullableSetUserRoleRequest {
	return &NullableSetUserRoleRequest{value: val, isSet: true}
}

func (v NullableSetUserRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetUserRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


