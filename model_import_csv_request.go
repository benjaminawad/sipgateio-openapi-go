/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ImportCSVRequest struct for ImportCSVRequest
type ImportCSVRequest struct {
	Base64Content *string `json:"base64Content,omitempty"`
}

// NewImportCSVRequest instantiates a new ImportCSVRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCSVRequest() *ImportCSVRequest {
	this := ImportCSVRequest{}
	return &this
}

// NewImportCSVRequestWithDefaults instantiates a new ImportCSVRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCSVRequestWithDefaults() *ImportCSVRequest {
	this := ImportCSVRequest{}
	return &this
}

// GetBase64Content returns the Base64Content field value if set, zero value otherwise.
func (o *ImportCSVRequest) GetBase64Content() string {
	if o == nil || o.Base64Content == nil {
		var ret string
		return ret
	}
	return *o.Base64Content
}

// GetBase64ContentOk returns a tuple with the Base64Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCSVRequest) GetBase64ContentOk() (*string, bool) {
	if o == nil || o.Base64Content == nil {
		return nil, false
	}
	return o.Base64Content, true
}

// HasBase64Content returns a boolean if a field has been set.
func (o *ImportCSVRequest) HasBase64Content() bool {
	if o != nil && o.Base64Content != nil {
		return true
	}

	return false
}

// SetBase64Content gets a reference to the given string and assigns it to the Base64Content field.
func (o *ImportCSVRequest) SetBase64Content(v string) {
	o.Base64Content = &v
}

func (o ImportCSVRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Base64Content != nil {
		toSerialize["base64Content"] = o.Base64Content
	}
	return json.Marshal(toSerialize)
}

type NullableImportCSVRequest struct {
	value *ImportCSVRequest
	isSet bool
}

func (v NullableImportCSVRequest) Get() *ImportCSVRequest {
	return v.value
}

func (v *NullableImportCSVRequest) Set(val *ImportCSVRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCSVRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCSVRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCSVRequest(val *ImportCSVRequest) *NullableImportCSVRequest {
	return &NullableImportCSVRequest{value: val, isSet: true}
}

func (v NullableImportCSVRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCSVRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


