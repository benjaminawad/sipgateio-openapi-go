/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SetHistoryEntryReadRequest struct for SetHistoryEntryReadRequest
type SetHistoryEntryReadRequest struct {
	Value *bool `json:"value,omitempty"`
}

// NewSetHistoryEntryReadRequest instantiates a new SetHistoryEntryReadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetHistoryEntryReadRequest() *SetHistoryEntryReadRequest {
	this := SetHistoryEntryReadRequest{}
	var value bool = false
	this.Value = &value
	return &this
}

// NewSetHistoryEntryReadRequestWithDefaults instantiates a new SetHistoryEntryReadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetHistoryEntryReadRequestWithDefaults() *SetHistoryEntryReadRequest {
	this := SetHistoryEntryReadRequest{}
	var value bool = false
	this.Value = &value
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SetHistoryEntryReadRequest) GetValue() bool {
	if o == nil || o.Value == nil {
		var ret bool
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetHistoryEntryReadRequest) GetValueOk() (*bool, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SetHistoryEntryReadRequest) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given bool and assigns it to the Value field.
func (o *SetHistoryEntryReadRequest) SetValue(v bool) {
	o.Value = &v
}

func (o SetHistoryEntryReadRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSetHistoryEntryReadRequest struct {
	value *SetHistoryEntryReadRequest
	isSet bool
}

func (v NullableSetHistoryEntryReadRequest) Get() *SetHistoryEntryReadRequest {
	return v.value
}

func (v *NullableSetHistoryEntryReadRequest) Set(val *SetHistoryEntryReadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetHistoryEntryReadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetHistoryEntryReadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetHistoryEntryReadRequest(val *SetHistoryEntryReadRequest) *NullableSetHistoryEntryReadRequest {
	return &NullableSetHistoryEntryReadRequest{value: val, isSet: true}
}

func (v NullableSetHistoryEntryReadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetHistoryEntryReadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


