/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateExternalDeviceRequest struct for CreateExternalDeviceRequest
type CreateExternalDeviceRequest struct {
	Alias *string `json:"alias,omitempty"`
	Number *string `json:"number,omitempty"`
}

// NewCreateExternalDeviceRequest instantiates a new CreateExternalDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExternalDeviceRequest() *CreateExternalDeviceRequest {
	this := CreateExternalDeviceRequest{}
	return &this
}

// NewCreateExternalDeviceRequestWithDefaults instantiates a new CreateExternalDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExternalDeviceRequestWithDefaults() *CreateExternalDeviceRequest {
	this := CreateExternalDeviceRequest{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *CreateExternalDeviceRequest) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExternalDeviceRequest) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *CreateExternalDeviceRequest) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *CreateExternalDeviceRequest) SetAlias(v string) {
	o.Alias = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *CreateExternalDeviceRequest) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExternalDeviceRequest) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *CreateExternalDeviceRequest) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *CreateExternalDeviceRequest) SetNumber(v string) {
	o.Number = &v
}

func (o CreateExternalDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	return json.Marshal(toSerialize)
}

type NullableCreateExternalDeviceRequest struct {
	value *CreateExternalDeviceRequest
	isSet bool
}

func (v NullableCreateExternalDeviceRequest) Get() *CreateExternalDeviceRequest {
	return v.value
}

func (v *NullableCreateExternalDeviceRequest) Set(val *CreateExternalDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExternalDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExternalDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExternalDeviceRequest(val *CreateExternalDeviceRequest) *NullableCreateExternalDeviceRequest {
	return &NullableCreateExternalDeviceRequest{value: val, isSet: true}
}

func (v NullableCreateExternalDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExternalDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


