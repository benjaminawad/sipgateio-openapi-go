/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TacResponse struct for TacResponse
type TacResponse struct {
	Accepted *bool `json:"accepted,omitempty"`
}

// NewTacResponse instantiates a new TacResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTacResponse() *TacResponse {
	this := TacResponse{}
	var accepted bool = false
	this.Accepted = &accepted
	return &this
}

// NewTacResponseWithDefaults instantiates a new TacResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTacResponseWithDefaults() *TacResponse {
	this := TacResponse{}
	var accepted bool = false
	this.Accepted = &accepted
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *TacResponse) GetAccepted() bool {
	if o == nil || o.Accepted == nil {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TacResponse) GetAcceptedOk() (*bool, bool) {
	if o == nil || o.Accepted == nil {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *TacResponse) HasAccepted() bool {
	if o != nil && o.Accepted != nil {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *TacResponse) SetAccepted(v bool) {
	o.Accepted = &v
}

func (o TacResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accepted != nil {
		toSerialize["accepted"] = o.Accepted
	}
	return json.Marshal(toSerialize)
}

type NullableTacResponse struct {
	value *TacResponse
	isSet bool
}

func (v NullableTacResponse) Get() *TacResponse {
	return v.value
}

func (v *NullableTacResponse) Set(val *TacResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTacResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTacResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTacResponse(val *TacResponse) *NullableTacResponse {
	return &NullableTacResponse{value: val, isSet: true}
}

func (v NullableTacResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTacResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


