/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ParallelForwardingResponse struct for ParallelForwardingResponse
type ParallelForwardingResponse struct {
	Id *string `json:"id,omitempty"`
	Alias *string `json:"alias,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewParallelForwardingResponse instantiates a new ParallelForwardingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParallelForwardingResponse() *ParallelForwardingResponse {
	this := ParallelForwardingResponse{}
	var active bool = false
	this.Active = &active
	return &this
}

// NewParallelForwardingResponseWithDefaults instantiates a new ParallelForwardingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParallelForwardingResponseWithDefaults() *ParallelForwardingResponse {
	this := ParallelForwardingResponse{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ParallelForwardingResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParallelForwardingResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ParallelForwardingResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ParallelForwardingResponse) SetId(v string) {
	o.Id = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ParallelForwardingResponse) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParallelForwardingResponse) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ParallelForwardingResponse) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *ParallelForwardingResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *ParallelForwardingResponse) GetDestination() string {
	if o == nil || o.Destination == nil {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParallelForwardingResponse) GetDestinationOk() (*string, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *ParallelForwardingResponse) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *ParallelForwardingResponse) SetDestination(v string) {
	o.Destination = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ParallelForwardingResponse) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParallelForwardingResponse) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ParallelForwardingResponse) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ParallelForwardingResponse) SetActive(v bool) {
	o.Active = &v
}

func (o ParallelForwardingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableParallelForwardingResponse struct {
	value *ParallelForwardingResponse
	isSet bool
}

func (v NullableParallelForwardingResponse) Get() *ParallelForwardingResponse {
	return v.value
}

func (v *NullableParallelForwardingResponse) Set(val *ParallelForwardingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableParallelForwardingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableParallelForwardingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParallelForwardingResponse(val *ParallelForwardingResponse) *NullableParallelForwardingResponse {
	return &NullableParallelForwardingResponse{value: val, isSet: true}
}

func (v NullableParallelForwardingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParallelForwardingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


