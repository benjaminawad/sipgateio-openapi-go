/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserinfoResponse struct for UserinfoResponse
type UserinfoResponse struct {
	Sub *string `json:"sub,omitempty"`
	Domain *string `json:"domain,omitempty"`
	MasterSipId *string `json:"masterSipId,omitempty"`
	Locale *string `json:"locale,omitempty"`
}

// NewUserinfoResponse instantiates a new UserinfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserinfoResponse() *UserinfoResponse {
	this := UserinfoResponse{}
	return &this
}

// NewUserinfoResponseWithDefaults instantiates a new UserinfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserinfoResponseWithDefaults() *UserinfoResponse {
	this := UserinfoResponse{}
	return &this
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *UserinfoResponse) GetSub() string {
	if o == nil || o.Sub == nil {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserinfoResponse) GetSubOk() (*string, bool) {
	if o == nil || o.Sub == nil {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *UserinfoResponse) HasSub() bool {
	if o != nil && o.Sub != nil {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *UserinfoResponse) SetSub(v string) {
	o.Sub = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UserinfoResponse) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserinfoResponse) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UserinfoResponse) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *UserinfoResponse) SetDomain(v string) {
	o.Domain = &v
}

// GetMasterSipId returns the MasterSipId field value if set, zero value otherwise.
func (o *UserinfoResponse) GetMasterSipId() string {
	if o == nil || o.MasterSipId == nil {
		var ret string
		return ret
	}
	return *o.MasterSipId
}

// GetMasterSipIdOk returns a tuple with the MasterSipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserinfoResponse) GetMasterSipIdOk() (*string, bool) {
	if o == nil || o.MasterSipId == nil {
		return nil, false
	}
	return o.MasterSipId, true
}

// HasMasterSipId returns a boolean if a field has been set.
func (o *UserinfoResponse) HasMasterSipId() bool {
	if o != nil && o.MasterSipId != nil {
		return true
	}

	return false
}

// SetMasterSipId gets a reference to the given string and assigns it to the MasterSipId field.
func (o *UserinfoResponse) SetMasterSipId(v string) {
	o.MasterSipId = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *UserinfoResponse) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserinfoResponse) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *UserinfoResponse) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *UserinfoResponse) SetLocale(v string) {
	o.Locale = &v
}

func (o UserinfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sub != nil {
		toSerialize["sub"] = o.Sub
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.MasterSipId != nil {
		toSerialize["masterSipId"] = o.MasterSipId
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	return json.Marshal(toSerialize)
}

type NullableUserinfoResponse struct {
	value *UserinfoResponse
	isSet bool
}

func (v NullableUserinfoResponse) Get() *UserinfoResponse {
	return v.value
}

func (v *NullableUserinfoResponse) Set(val *UserinfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserinfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserinfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserinfoResponse(val *UserinfoResponse) *NullableUserinfoResponse {
	return &NullableUserinfoResponse{value: val, isSet: true}
}

func (v NullableUserinfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserinfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


