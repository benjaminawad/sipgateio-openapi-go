/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemCountResponse struct for ItemCountResponse
type ItemCountResponse struct {
	ItemCount *int32 `json:"itemCount,omitempty"`
}

// NewItemCountResponse instantiates a new ItemCountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemCountResponse() *ItemCountResponse {
	this := ItemCountResponse{}
	return &this
}

// NewItemCountResponseWithDefaults instantiates a new ItemCountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemCountResponseWithDefaults() *ItemCountResponse {
	this := ItemCountResponse{}
	return &this
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *ItemCountResponse) GetItemCount() int32 {
	if o == nil || o.ItemCount == nil {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemCountResponse) GetItemCountOk() (*int32, bool) {
	if o == nil || o.ItemCount == nil {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *ItemCountResponse) HasItemCount() bool {
	if o != nil && o.ItemCount != nil {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *ItemCountResponse) SetItemCount(v int32) {
	o.ItemCount = &v
}

func (o ItemCountResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemCount != nil {
		toSerialize["itemCount"] = o.ItemCount
	}
	return json.Marshal(toSerialize)
}

type NullableItemCountResponse struct {
	value *ItemCountResponse
	isSet bool
}

func (v NullableItemCountResponse) Get() *ItemCountResponse {
	return v.value
}

func (v *NullableItemCountResponse) Set(val *ItemCountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableItemCountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableItemCountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemCountResponse(val *ItemCountResponse) *NullableItemCountResponse {
	return &NullableItemCountResponse{value: val, isSet: true}
}

func (v NullableItemCountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemCountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


