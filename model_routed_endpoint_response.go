/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoutedEndpointResponse struct for RoutedEndpointResponse
type RoutedEndpointResponse struct {
	Type *string `json:"type,omitempty"`
	Endpoint *EndpointResponse `json:"endpoint,omitempty"`
}

// NewRoutedEndpointResponse instantiates a new RoutedEndpointResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutedEndpointResponse() *RoutedEndpointResponse {
	this := RoutedEndpointResponse{}
	return &this
}

// NewRoutedEndpointResponseWithDefaults instantiates a new RoutedEndpointResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutedEndpointResponseWithDefaults() *RoutedEndpointResponse {
	this := RoutedEndpointResponse{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoutedEndpointResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutedEndpointResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoutedEndpointResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoutedEndpointResponse) SetType(v string) {
	o.Type = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *RoutedEndpointResponse) GetEndpoint() EndpointResponse {
	if o == nil || o.Endpoint == nil {
		var ret EndpointResponse
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutedEndpointResponse) GetEndpointOk() (*EndpointResponse, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *RoutedEndpointResponse) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given EndpointResponse and assigns it to the Endpoint field.
func (o *RoutedEndpointResponse) SetEndpoint(v EndpointResponse) {
	o.Endpoint = &v
}

func (o RoutedEndpointResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	return json.Marshal(toSerialize)
}

type NullableRoutedEndpointResponse struct {
	value *RoutedEndpointResponse
	isSet bool
}

func (v NullableRoutedEndpointResponse) Get() *RoutedEndpointResponse {
	return v.value
}

func (v *NullableRoutedEndpointResponse) Set(val *RoutedEndpointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutedEndpointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutedEndpointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutedEndpointResponse(val *RoutedEndpointResponse) *NullableRoutedEndpointResponse {
	return &NullableRoutedEndpointResponse{value: val, isSet: true}
}

func (v NullableRoutedEndpointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutedEndpointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


