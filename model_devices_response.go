/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevicesResponse struct for DevicesResponse
type DevicesResponse struct {
	Items []DeviceResponse `json:"items,omitempty"`
}

// NewDevicesResponse instantiates a new DevicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesResponse() *DevicesResponse {
	this := DevicesResponse{}
	return &this
}

// NewDevicesResponseWithDefaults instantiates a new DevicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesResponseWithDefaults() *DevicesResponse {
	this := DevicesResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DevicesResponse) GetItems() []DeviceResponse {
	if o == nil || o.Items == nil {
		var ret []DeviceResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesResponse) GetItemsOk() ([]DeviceResponse, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DevicesResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DeviceResponse and assigns it to the Items field.
func (o *DevicesResponse) SetItems(v []DeviceResponse) {
	o.Items = v
}

func (o DevicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableDevicesResponse struct {
	value *DevicesResponse
	isSet bool
}

func (v NullableDevicesResponse) Get() *DevicesResponse {
	return v.value
}

func (v *NullableDevicesResponse) Set(val *DevicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesResponse(val *DevicesResponse) *NullableDevicesResponse {
	return &NullableDevicesResponse{value: val, isSet: true}
}

func (v NullableDevicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


