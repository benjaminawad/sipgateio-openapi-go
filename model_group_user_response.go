/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupUserResponse struct for GroupUserResponse
type GroupUserResponse struct {
	Id *string `json:"id,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname *string `json:"lastname,omitempty"`
	UserUrl *string `json:"userUrl,omitempty"`
}

// NewGroupUserResponse instantiates a new GroupUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupUserResponse() *GroupUserResponse {
	this := GroupUserResponse{}
	return &this
}

// NewGroupUserResponseWithDefaults instantiates a new GroupUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupUserResponseWithDefaults() *GroupUserResponse {
	this := GroupUserResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupUserResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupUserResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupUserResponse) SetId(v string) {
	o.Id = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *GroupUserResponse) GetFirstname() string {
	if o == nil || o.Firstname == nil {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserResponse) GetFirstnameOk() (*string, bool) {
	if o == nil || o.Firstname == nil {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *GroupUserResponse) HasFirstname() bool {
	if o != nil && o.Firstname != nil {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *GroupUserResponse) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *GroupUserResponse) GetLastname() string {
	if o == nil || o.Lastname == nil {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserResponse) GetLastnameOk() (*string, bool) {
	if o == nil || o.Lastname == nil {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *GroupUserResponse) HasLastname() bool {
	if o != nil && o.Lastname != nil {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *GroupUserResponse) SetLastname(v string) {
	o.Lastname = &v
}

// GetUserUrl returns the UserUrl field value if set, zero value otherwise.
func (o *GroupUserResponse) GetUserUrl() string {
	if o == nil || o.UserUrl == nil {
		var ret string
		return ret
	}
	return *o.UserUrl
}

// GetUserUrlOk returns a tuple with the UserUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserResponse) GetUserUrlOk() (*string, bool) {
	if o == nil || o.UserUrl == nil {
		return nil, false
	}
	return o.UserUrl, true
}

// HasUserUrl returns a boolean if a field has been set.
func (o *GroupUserResponse) HasUserUrl() bool {
	if o != nil && o.UserUrl != nil {
		return true
	}

	return false
}

// SetUserUrl gets a reference to the given string and assigns it to the UserUrl field.
func (o *GroupUserResponse) SetUserUrl(v string) {
	o.UserUrl = &v
}

func (o GroupUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Firstname != nil {
		toSerialize["firstname"] = o.Firstname
	}
	if o.Lastname != nil {
		toSerialize["lastname"] = o.Lastname
	}
	if o.UserUrl != nil {
		toSerialize["userUrl"] = o.UserUrl
	}
	return json.Marshal(toSerialize)
}

type NullableGroupUserResponse struct {
	value *GroupUserResponse
	isSet bool
}

func (v NullableGroupUserResponse) Get() *GroupUserResponse {
	return v.value
}

func (v *NullableGroupUserResponse) Set(val *GroupUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUserResponse(val *GroupUserResponse) *NullableGroupUserResponse {
	return &NullableGroupUserResponse{value: val, isSet: true}
}

func (v NullableGroupUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


