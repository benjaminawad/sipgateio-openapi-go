/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForwardingsResponse struct for ForwardingsResponse
type ForwardingsResponse struct {
	Items []ForwardingResponse `json:"items,omitempty"`
}

// NewForwardingsResponse instantiates a new ForwardingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForwardingsResponse() *ForwardingsResponse {
	this := ForwardingsResponse{}
	return &this
}

// NewForwardingsResponseWithDefaults instantiates a new ForwardingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForwardingsResponseWithDefaults() *ForwardingsResponse {
	this := ForwardingsResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ForwardingsResponse) GetItems() []ForwardingResponse {
	if o == nil || o.Items == nil {
		var ret []ForwardingResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardingsResponse) GetItemsOk() ([]ForwardingResponse, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ForwardingsResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ForwardingResponse and assigns it to the Items field.
func (o *ForwardingsResponse) SetItems(v []ForwardingResponse) {
	o.Items = v
}

func (o ForwardingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableForwardingsResponse struct {
	value *ForwardingsResponse
	isSet bool
}

func (v NullableForwardingsResponse) Get() *ForwardingsResponse {
	return v.value
}

func (v *NullableForwardingsResponse) Set(val *ForwardingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableForwardingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableForwardingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForwardingsResponse(val *ForwardingsResponse) *NullableForwardingsResponse {
	return &NullableForwardingsResponse{value: val, isSet: true}
}

func (v NullableForwardingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForwardingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


