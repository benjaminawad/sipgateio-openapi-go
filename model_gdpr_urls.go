/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GdprUrls struct for GdprUrls
type GdprUrls struct {
	// The privacy policy URL
	PrivacyUrl *string `json:"privacyUrl,omitempty"`
	// The terms and conditions URL
	TermsUrl *string `json:"termsUrl,omitempty"`
}

// NewGdprUrls instantiates a new GdprUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGdprUrls() *GdprUrls {
	this := GdprUrls{}
	return &this
}

// NewGdprUrlsWithDefaults instantiates a new GdprUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGdprUrlsWithDefaults() *GdprUrls {
	this := GdprUrls{}
	return &this
}

// GetPrivacyUrl returns the PrivacyUrl field value if set, zero value otherwise.
func (o *GdprUrls) GetPrivacyUrl() string {
	if o == nil || o.PrivacyUrl == nil {
		var ret string
		return ret
	}
	return *o.PrivacyUrl
}

// GetPrivacyUrlOk returns a tuple with the PrivacyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GdprUrls) GetPrivacyUrlOk() (*string, bool) {
	if o == nil || o.PrivacyUrl == nil {
		return nil, false
	}
	return o.PrivacyUrl, true
}

// HasPrivacyUrl returns a boolean if a field has been set.
func (o *GdprUrls) HasPrivacyUrl() bool {
	if o != nil && o.PrivacyUrl != nil {
		return true
	}

	return false
}

// SetPrivacyUrl gets a reference to the given string and assigns it to the PrivacyUrl field.
func (o *GdprUrls) SetPrivacyUrl(v string) {
	o.PrivacyUrl = &v
}

// GetTermsUrl returns the TermsUrl field value if set, zero value otherwise.
func (o *GdprUrls) GetTermsUrl() string {
	if o == nil || o.TermsUrl == nil {
		var ret string
		return ret
	}
	return *o.TermsUrl
}

// GetTermsUrlOk returns a tuple with the TermsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GdprUrls) GetTermsUrlOk() (*string, bool) {
	if o == nil || o.TermsUrl == nil {
		return nil, false
	}
	return o.TermsUrl, true
}

// HasTermsUrl returns a boolean if a field has been set.
func (o *GdprUrls) HasTermsUrl() bool {
	if o != nil && o.TermsUrl != nil {
		return true
	}

	return false
}

// SetTermsUrl gets a reference to the given string and assigns it to the TermsUrl field.
func (o *GdprUrls) SetTermsUrl(v string) {
	o.TermsUrl = &v
}

func (o GdprUrls) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrivacyUrl != nil {
		toSerialize["privacyUrl"] = o.PrivacyUrl
	}
	if o.TermsUrl != nil {
		toSerialize["termsUrl"] = o.TermsUrl
	}
	return json.Marshal(toSerialize)
}

type NullableGdprUrls struct {
	value *GdprUrls
	isSet bool
}

func (v NullableGdprUrls) Get() *GdprUrls {
	return v.value
}

func (v *NullableGdprUrls) Set(val *GdprUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableGdprUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableGdprUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGdprUrls(val *GdprUrls) *NullableGdprUrls {
	return &NullableGdprUrls{value: val, isSet: true}
}

func (v NullableGdprUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGdprUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


