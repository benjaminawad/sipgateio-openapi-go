/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Calls struct for Calls
type Calls struct {
	Data []Call `json:"data,omitempty"`
}

// NewCalls instantiates a new Calls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalls() *Calls {
	this := Calls{}
	return &this
}

// NewCallsWithDefaults instantiates a new Calls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallsWithDefaults() *Calls {
	this := Calls{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Calls) GetData() []Call {
	if o == nil || o.Data == nil {
		var ret []Call
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calls) GetDataOk() ([]Call, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Calls) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Call and assigns it to the Data field.
func (o *Calls) SetData(v []Call) {
	o.Data = v
}

func (o Calls) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCalls struct {
	value *Calls
	isSet bool
}

func (v NullableCalls) Get() *Calls {
	return v.value
}

func (v *NullableCalls) Set(val *Calls) {
	v.value = val
	v.isSet = true
}

func (v NullableCalls) IsSet() bool {
	return v.isSet
}

func (v *NullableCalls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalls(val *Calls) *NullableCalls {
	return &NullableCalls{value: val, isSet: true}
}

func (v NullableCalls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


