/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorSource A more detailed info where the error occured
type ErrorSource struct {
	// A pointer to indicate where the error occured
	Pointer *string `json:"pointer,omitempty"`
}

// NewErrorSource instantiates a new ErrorSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorSource() *ErrorSource {
	this := ErrorSource{}
	return &this
}

// NewErrorSourceWithDefaults instantiates a new ErrorSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorSourceWithDefaults() *ErrorSource {
	this := ErrorSource{}
	return &this
}

// GetPointer returns the Pointer field value if set, zero value otherwise.
func (o *ErrorSource) GetPointer() string {
	if o == nil || o.Pointer == nil {
		var ret string
		return ret
	}
	return *o.Pointer
}

// GetPointerOk returns a tuple with the Pointer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorSource) GetPointerOk() (*string, bool) {
	if o == nil || o.Pointer == nil {
		return nil, false
	}
	return o.Pointer, true
}

// HasPointer returns a boolean if a field has been set.
func (o *ErrorSource) HasPointer() bool {
	if o != nil && o.Pointer != nil {
		return true
	}

	return false
}

// SetPointer gets a reference to the given string and assigns it to the Pointer field.
func (o *ErrorSource) SetPointer(v string) {
	o.Pointer = &v
}

func (o ErrorSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pointer != nil {
		toSerialize["pointer"] = o.Pointer
	}
	return json.Marshal(toSerialize)
}

type NullableErrorSource struct {
	value *ErrorSource
	isSet bool
}

func (v NullableErrorSource) Get() *ErrorSource {
	return v.value
}

func (v *NullableErrorSource) Set(val *ErrorSource) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorSource) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorSource(val *ErrorSource) *NullableErrorSource {
	return &NullableErrorSource{value: val, isSet: true}
}

func (v NullableErrorSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


