/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisteredDevice struct for RegisteredDevice
type RegisteredDevice struct {
	UserAgent *string `json:"userAgent,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Port *string `json:"port,omitempty"`
}

// NewRegisteredDevice instantiates a new RegisteredDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredDevice() *RegisteredDevice {
	this := RegisteredDevice{}
	return &this
}

// NewRegisteredDeviceWithDefaults instantiates a new RegisteredDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredDeviceWithDefaults() *RegisteredDevice {
	this := RegisteredDevice{}
	return &this
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *RegisteredDevice) GetUserAgent() string {
	if o == nil || o.UserAgent == nil {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredDevice) GetUserAgentOk() (*string, bool) {
	if o == nil || o.UserAgent == nil {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *RegisteredDevice) HasUserAgent() bool {
	if o != nil && o.UserAgent != nil {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *RegisteredDevice) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *RegisteredDevice) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredDevice) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *RegisteredDevice) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *RegisteredDevice) SetIp(v string) {
	o.Ip = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RegisteredDevice) GetPort() string {
	if o == nil || o.Port == nil {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredDevice) GetPortOk() (*string, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RegisteredDevice) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *RegisteredDevice) SetPort(v string) {
	o.Port = &v
}

func (o RegisteredDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserAgent != nil {
		toSerialize["userAgent"] = o.UserAgent
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredDevice struct {
	value *RegisteredDevice
	isSet bool
}

func (v NullableRegisteredDevice) Get() *RegisteredDevice {
	return v.value
}

func (v *NullableRegisteredDevice) Set(val *RegisteredDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredDevice(val *RegisteredDevice) *NullableRegisteredDevice {
	return &NullableRegisteredDevice{value: val, isSet: true}
}

func (v NullableRegisteredDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


