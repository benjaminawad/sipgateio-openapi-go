/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransferRequest struct for TransferRequest
type TransferRequest struct {
	// The transfer is attended or blind
	Attended bool `json:"attended"`
	// Transfer target phone number
	PhoneNumber string `json:"phoneNumber"`
	// Caller phone nuber
	CallerId *string `json:"callerId,omitempty"`
}

// NewTransferRequest instantiates a new TransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferRequest(attended bool, phoneNumber string) *TransferRequest {
	this := TransferRequest{}
	this.Attended = attended
	this.PhoneNumber = phoneNumber
	return &this
}

// NewTransferRequestWithDefaults instantiates a new TransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferRequestWithDefaults() *TransferRequest {
	this := TransferRequest{}
	return &this
}

// GetAttended returns the Attended field value
func (o *TransferRequest) GetAttended() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Attended
}

// GetAttendedOk returns a tuple with the Attended field value
// and a boolean to check if the value has been set.
func (o *TransferRequest) GetAttendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attended, true
}

// SetAttended sets field value
func (o *TransferRequest) SetAttended(v bool) {
	o.Attended = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *TransferRequest) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *TransferRequest) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *TransferRequest) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetCallerId returns the CallerId field value if set, zero value otherwise.
func (o *TransferRequest) GetCallerId() string {
	if o == nil || o.CallerId == nil {
		var ret string
		return ret
	}
	return *o.CallerId
}

// GetCallerIdOk returns a tuple with the CallerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferRequest) GetCallerIdOk() (*string, bool) {
	if o == nil || o.CallerId == nil {
		return nil, false
	}
	return o.CallerId, true
}

// HasCallerId returns a boolean if a field has been set.
func (o *TransferRequest) HasCallerId() bool {
	if o != nil && o.CallerId != nil {
		return true
	}

	return false
}

// SetCallerId gets a reference to the given string and assigns it to the CallerId field.
func (o *TransferRequest) SetCallerId(v string) {
	o.CallerId = &v
}

func (o TransferRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attended"] = o.Attended
	}
	if true {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.CallerId != nil {
		toSerialize["callerId"] = o.CallerId
	}
	return json.Marshal(toSerialize)
}

type NullableTransferRequest struct {
	value *TransferRequest
	isSet bool
}

func (v NullableTransferRequest) Get() *TransferRequest {
	return v.value
}

func (v *NullableTransferRequest) Set(val *TransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRequest(val *TransferRequest) *NullableTransferRequest {
	return &NullableTransferRequest{value: val, isSet: true}
}

func (v NullableTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


