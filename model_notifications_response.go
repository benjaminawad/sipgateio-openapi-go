/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NotificationsResponse struct for NotificationsResponse
type NotificationsResponse struct {
	Fax []FaxNotificationResponse `json:"fax,omitempty"`
	Voicemail []VoicemailNotificationResponse `json:"voicemail,omitempty"`
	Call []CallNotificationResponse `json:"call,omitempty"`
	Sms []SmsNotificationResponse `json:"sms,omitempty"`
}

// NewNotificationsResponse instantiates a new NotificationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsResponse() *NotificationsResponse {
	this := NotificationsResponse{}
	return &this
}

// NewNotificationsResponseWithDefaults instantiates a new NotificationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsResponseWithDefaults() *NotificationsResponse {
	this := NotificationsResponse{}
	return &this
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *NotificationsResponse) GetFax() []FaxNotificationResponse {
	if o == nil || o.Fax == nil {
		var ret []FaxNotificationResponse
		return ret
	}
	return o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsResponse) GetFaxOk() ([]FaxNotificationResponse, bool) {
	if o == nil || o.Fax == nil {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *NotificationsResponse) HasFax() bool {
	if o != nil && o.Fax != nil {
		return true
	}

	return false
}

// SetFax gets a reference to the given []FaxNotificationResponse and assigns it to the Fax field.
func (o *NotificationsResponse) SetFax(v []FaxNotificationResponse) {
	o.Fax = v
}

// GetVoicemail returns the Voicemail field value if set, zero value otherwise.
func (o *NotificationsResponse) GetVoicemail() []VoicemailNotificationResponse {
	if o == nil || o.Voicemail == nil {
		var ret []VoicemailNotificationResponse
		return ret
	}
	return o.Voicemail
}

// GetVoicemailOk returns a tuple with the Voicemail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsResponse) GetVoicemailOk() ([]VoicemailNotificationResponse, bool) {
	if o == nil || o.Voicemail == nil {
		return nil, false
	}
	return o.Voicemail, true
}

// HasVoicemail returns a boolean if a field has been set.
func (o *NotificationsResponse) HasVoicemail() bool {
	if o != nil && o.Voicemail != nil {
		return true
	}

	return false
}

// SetVoicemail gets a reference to the given []VoicemailNotificationResponse and assigns it to the Voicemail field.
func (o *NotificationsResponse) SetVoicemail(v []VoicemailNotificationResponse) {
	o.Voicemail = v
}

// GetCall returns the Call field value if set, zero value otherwise.
func (o *NotificationsResponse) GetCall() []CallNotificationResponse {
	if o == nil || o.Call == nil {
		var ret []CallNotificationResponse
		return ret
	}
	return o.Call
}

// GetCallOk returns a tuple with the Call field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsResponse) GetCallOk() ([]CallNotificationResponse, bool) {
	if o == nil || o.Call == nil {
		return nil, false
	}
	return o.Call, true
}

// HasCall returns a boolean if a field has been set.
func (o *NotificationsResponse) HasCall() bool {
	if o != nil && o.Call != nil {
		return true
	}

	return false
}

// SetCall gets a reference to the given []CallNotificationResponse and assigns it to the Call field.
func (o *NotificationsResponse) SetCall(v []CallNotificationResponse) {
	o.Call = v
}

// GetSms returns the Sms field value if set, zero value otherwise.
func (o *NotificationsResponse) GetSms() []SmsNotificationResponse {
	if o == nil || o.Sms == nil {
		var ret []SmsNotificationResponse
		return ret
	}
	return o.Sms
}

// GetSmsOk returns a tuple with the Sms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsResponse) GetSmsOk() ([]SmsNotificationResponse, bool) {
	if o == nil || o.Sms == nil {
		return nil, false
	}
	return o.Sms, true
}

// HasSms returns a boolean if a field has been set.
func (o *NotificationsResponse) HasSms() bool {
	if o != nil && o.Sms != nil {
		return true
	}

	return false
}

// SetSms gets a reference to the given []SmsNotificationResponse and assigns it to the Sms field.
func (o *NotificationsResponse) SetSms(v []SmsNotificationResponse) {
	o.Sms = v
}

func (o NotificationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fax != nil {
		toSerialize["fax"] = o.Fax
	}
	if o.Voicemail != nil {
		toSerialize["voicemail"] = o.Voicemail
	}
	if o.Call != nil {
		toSerialize["call"] = o.Call
	}
	if o.Sms != nil {
		toSerialize["sms"] = o.Sms
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationsResponse struct {
	value *NotificationsResponse
	isSet bool
}

func (v NullableNotificationsResponse) Get() *NotificationsResponse {
	return v.value
}

func (v *NullableNotificationsResponse) Set(val *NotificationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsResponse(val *NotificationsResponse) *NullableNotificationsResponse {
	return &NullableNotificationsResponse{value: val, isSet: true}
}

func (v NullableNotificationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


