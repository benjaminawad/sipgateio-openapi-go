/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActivateSimRequest struct for ActivateSimRequest
type ActivateSimRequest struct {
	SimId *string `json:"simId,omitempty"`
}

// NewActivateSimRequest instantiates a new ActivateSimRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateSimRequest() *ActivateSimRequest {
	this := ActivateSimRequest{}
	return &this
}

// NewActivateSimRequestWithDefaults instantiates a new ActivateSimRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateSimRequestWithDefaults() *ActivateSimRequest {
	this := ActivateSimRequest{}
	return &this
}

// GetSimId returns the SimId field value if set, zero value otherwise.
func (o *ActivateSimRequest) GetSimId() string {
	if o == nil || o.SimId == nil {
		var ret string
		return ret
	}
	return *o.SimId
}

// GetSimIdOk returns a tuple with the SimId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateSimRequest) GetSimIdOk() (*string, bool) {
	if o == nil || o.SimId == nil {
		return nil, false
	}
	return o.SimId, true
}

// HasSimId returns a boolean if a field has been set.
func (o *ActivateSimRequest) HasSimId() bool {
	if o != nil && o.SimId != nil {
		return true
	}

	return false
}

// SetSimId gets a reference to the given string and assigns it to the SimId field.
func (o *ActivateSimRequest) SetSimId(v string) {
	o.SimId = &v
}

func (o ActivateSimRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SimId != nil {
		toSerialize["simId"] = o.SimId
	}
	return json.Marshal(toSerialize)
}

type NullableActivateSimRequest struct {
	value *ActivateSimRequest
	isSet bool
}

func (v NullableActivateSimRequest) Get() *ActivateSimRequest {
	return v.value
}

func (v *NullableActivateSimRequest) Set(val *ActivateSimRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateSimRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateSimRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateSimRequest(val *ActivateSimRequest) *NullableActivateSimRequest {
	return &NullableActivateSimRequest{value: val, isSet: true}
}

func (v NullableActivateSimRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateSimRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


