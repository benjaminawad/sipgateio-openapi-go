/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HistoryResponse struct for HistoryResponse
type HistoryResponse struct {
	Items []HistoryEntryResponse `json:"items,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewHistoryResponse instantiates a new HistoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryResponse() *HistoryResponse {
	this := HistoryResponse{}
	return &this
}

// NewHistoryResponseWithDefaults instantiates a new HistoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryResponseWithDefaults() *HistoryResponse {
	this := HistoryResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *HistoryResponse) GetItems() []HistoryEntryResponse {
	if o == nil || o.Items == nil {
		var ret []HistoryEntryResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResponse) GetItemsOk() ([]HistoryEntryResponse, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *HistoryResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []HistoryEntryResponse and assigns it to the Items field.
func (o *HistoryResponse) SetItems(v []HistoryEntryResponse) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *HistoryResponse) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *HistoryResponse) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *HistoryResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o HistoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryResponse struct {
	value *HistoryResponse
	isSet bool
}

func (v NullableHistoryResponse) Get() *HistoryResponse {
	return v.value
}

func (v *NullableHistoryResponse) Set(val *HistoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryResponse(val *HistoryResponse) *NullableHistoryResponse {
	return &NullableHistoryResponse{value: val, isSet: true}
}

func (v NullableHistoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


