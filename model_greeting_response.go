/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GreetingResponse struct for GreetingResponse
type GreetingResponse struct {
	Id *string `json:"id,omitempty"`
	Alias *string `json:"alias,omitempty"`
	GreetingUrl *string `json:"greetingUrl,omitempty"`
	RecordingEnabled *bool `json:"recordingEnabled,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewGreetingResponse instantiates a new GreetingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGreetingResponse() *GreetingResponse {
	this := GreetingResponse{}
	var recordingEnabled bool = false
	this.RecordingEnabled = &recordingEnabled
	var active bool = false
	this.Active = &active
	return &this
}

// NewGreetingResponseWithDefaults instantiates a new GreetingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGreetingResponseWithDefaults() *GreetingResponse {
	this := GreetingResponse{}
	var recordingEnabled bool = false
	this.RecordingEnabled = &recordingEnabled
	var active bool = false
	this.Active = &active
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GreetingResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreetingResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GreetingResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GreetingResponse) SetId(v string) {
	o.Id = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *GreetingResponse) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreetingResponse) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *GreetingResponse) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *GreetingResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetGreetingUrl returns the GreetingUrl field value if set, zero value otherwise.
func (o *GreetingResponse) GetGreetingUrl() string {
	if o == nil || o.GreetingUrl == nil {
		var ret string
		return ret
	}
	return *o.GreetingUrl
}

// GetGreetingUrlOk returns a tuple with the GreetingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreetingResponse) GetGreetingUrlOk() (*string, bool) {
	if o == nil || o.GreetingUrl == nil {
		return nil, false
	}
	return o.GreetingUrl, true
}

// HasGreetingUrl returns a boolean if a field has been set.
func (o *GreetingResponse) HasGreetingUrl() bool {
	if o != nil && o.GreetingUrl != nil {
		return true
	}

	return false
}

// SetGreetingUrl gets a reference to the given string and assigns it to the GreetingUrl field.
func (o *GreetingResponse) SetGreetingUrl(v string) {
	o.GreetingUrl = &v
}

// GetRecordingEnabled returns the RecordingEnabled field value if set, zero value otherwise.
func (o *GreetingResponse) GetRecordingEnabled() bool {
	if o == nil || o.RecordingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.RecordingEnabled
}

// GetRecordingEnabledOk returns a tuple with the RecordingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreetingResponse) GetRecordingEnabledOk() (*bool, bool) {
	if o == nil || o.RecordingEnabled == nil {
		return nil, false
	}
	return o.RecordingEnabled, true
}

// HasRecordingEnabled returns a boolean if a field has been set.
func (o *GreetingResponse) HasRecordingEnabled() bool {
	if o != nil && o.RecordingEnabled != nil {
		return true
	}

	return false
}

// SetRecordingEnabled gets a reference to the given bool and assigns it to the RecordingEnabled field.
func (o *GreetingResponse) SetRecordingEnabled(v bool) {
	o.RecordingEnabled = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GreetingResponse) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreetingResponse) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GreetingResponse) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *GreetingResponse) SetActive(v bool) {
	o.Active = &v
}

func (o GreetingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.GreetingUrl != nil {
		toSerialize["greetingUrl"] = o.GreetingUrl
	}
	if o.RecordingEnabled != nil {
		toSerialize["recordingEnabled"] = o.RecordingEnabled
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableGreetingResponse struct {
	value *GreetingResponse
	isSet bool
}

func (v NullableGreetingResponse) Get() *GreetingResponse {
	return v.value
}

func (v *NullableGreetingResponse) Set(val *GreetingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGreetingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGreetingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGreetingResponse(val *GreetingResponse) *NullableGreetingResponse {
	return &NullableGreetingResponse{value: val, isSet: true}
}

func (v NullableGreetingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGreetingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


