/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EMailResponse struct for EMailResponse
type EMailResponse struct {
	Email *string `json:"email,omitempty"`
	Type []string `json:"type,omitempty"`
}

// NewEMailResponse instantiates a new EMailResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEMailResponse() *EMailResponse {
	this := EMailResponse{}
	return &this
}

// NewEMailResponseWithDefaults instantiates a new EMailResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEMailResponseWithDefaults() *EMailResponse {
	this := EMailResponse{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EMailResponse) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EMailResponse) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EMailResponse) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EMailResponse) SetEmail(v string) {
	o.Email = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EMailResponse) GetType() []string {
	if o == nil || o.Type == nil {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EMailResponse) GetTypeOk() ([]string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EMailResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *EMailResponse) SetType(v []string) {
	o.Type = v
}

func (o EMailResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEMailResponse struct {
	value *EMailResponse
	isSet bool
}

func (v NullableEMailResponse) Get() *EMailResponse {
	return v.value
}

func (v *NullableEMailResponse) Set(val *EMailResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEMailResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEMailResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEMailResponse(val *EMailResponse) *NullableEMailResponse {
	return &NullableEMailResponse{value: val, isSet: true}
}

func (v NullableEMailResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEMailResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


