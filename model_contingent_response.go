/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContingentResponse struct for ContingentResponse
type ContingentResponse struct {
	Type *string `json:"type,omitempty"`
	Amount *int32 `json:"amount,omitempty"`
	Used *int32 `json:"used,omitempty"`
	Left *int32 `json:"left,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Expires *string `json:"expires,omitempty"`
}

// NewContingentResponse instantiates a new ContingentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContingentResponse() *ContingentResponse {
	this := ContingentResponse{}
	return &this
}

// NewContingentResponseWithDefaults instantiates a new ContingentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContingentResponseWithDefaults() *ContingentResponse {
	this := ContingentResponse{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContingentResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContingentResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ContingentResponse) SetType(v string) {
	o.Type = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ContingentResponse) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ContingentResponse) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *ContingentResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ContingentResponse) GetUsed() int32 {
	if o == nil || o.Used == nil {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetUsedOk() (*int32, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ContingentResponse) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *ContingentResponse) SetUsed(v int32) {
	o.Used = &v
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *ContingentResponse) GetLeft() int32 {
	if o == nil || o.Left == nil {
		var ret int32
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetLeftOk() (*int32, bool) {
	if o == nil || o.Left == nil {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *ContingentResponse) HasLeft() bool {
	if o != nil && o.Left != nil {
		return true
	}

	return false
}

// SetLeft gets a reference to the given int32 and assigns it to the Left field.
func (o *ContingentResponse) SetLeft(v int32) {
	o.Left = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ContingentResponse) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ContingentResponse) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *ContingentResponse) SetUnit(v string) {
	o.Unit = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *ContingentResponse) GetExpires() string {
	if o == nil || o.Expires == nil {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContingentResponse) GetExpiresOk() (*string, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ContingentResponse) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *ContingentResponse) SetExpires(v string) {
	o.Expires = &v
}

func (o ContingentResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	if o.Left != nil {
		toSerialize["left"] = o.Left
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	return json.Marshal(toSerialize)
}

type NullableContingentResponse struct {
	value *ContingentResponse
	isSet bool
}

func (v NullableContingentResponse) Get() *ContingentResponse {
	return v.value
}

func (v *NullableContingentResponse) Set(val *ContingentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContingentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContingentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContingentResponse(val *ContingentResponse) *NullableContingentResponse {
	return &NullableContingentResponse{value: val, isSet: true}
}

func (v NullableContingentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContingentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


