/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PhonelinesApiService PhonelinesApi service
type PhonelinesApiService service

type ApiAddDeviceToPhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *RouteDeviceRequest
}

func (r ApiAddDeviceToPhonelineRequest) Body(body RouteDeviceRequest) ApiAddDeviceToPhonelineRequest {
	r.body = &body
	return r
}

func (r ApiAddDeviceToPhonelineRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddDeviceToPhonelineExecute(r)
}

/*
AddDeviceToPhoneline Add device to phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiAddDeviceToPhonelineRequest
*/
func (a *PhonelinesApiService) AddDeviceToPhoneline(ctx context.Context, userId string, phonelineId string) ApiAddDeviceToPhonelineRequest {
	return ApiAddDeviceToPhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) AddDeviceToPhonelineExecute(r ApiAddDeviceToPhonelineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.AddDeviceToPhoneline")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAddGreetingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
	body *AddGreetingRequest
}

func (r ApiAddGreetingRequest) Body(body AddGreetingRequest) ApiAddGreetingRequest {
	r.body = &body
	return r
}

func (r ApiAddGreetingRequest) Execute() (*GreetingsResponse, *http.Response, error) {
	return r.ApiService.AddGreetingExecute(r)
}

/*
AddGreeting Create a new greeting for a specific phone line voicemail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @return ApiAddGreetingRequest
*/
func (a *PhonelinesApiService) AddGreeting(ctx context.Context, userId string, phonelineId string, voicemailId string) ApiAddGreetingRequest {
	return ApiAddGreetingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
	}
}

// Execute executes the request
//  @return GreetingsResponse
func (a *PhonelinesApiService) AddGreetingExecute(r ApiAddGreetingRequest) (*GreetingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GreetingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.AddGreeting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddParallelForwardingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *SetParallelForwardingRequest
}

func (r ApiAddParallelForwardingRequest) Body(body SetParallelForwardingRequest) ApiAddParallelForwardingRequest {
	r.body = &body
	return r
}

func (r ApiAddParallelForwardingRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddParallelForwardingExecute(r)
}

/*
AddParallelForwarding Create parallel forwarding for an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiAddParallelForwardingRequest

Deprecated
*/
func (a *PhonelinesApiService) AddParallelForwarding(ctx context.Context, userId string, phonelineId string) ApiAddParallelForwardingRequest {
	return ApiAddParallelForwardingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
// Deprecated
func (a *PhonelinesApiService) AddParallelForwardingExecute(r ApiAddParallelForwardingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.AddParallelForwarding")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/parallelforwardings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangeParallelForwardingSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	parallelForwardingId string
	body *SetParallelForwardingRequest
}

func (r ApiChangeParallelForwardingSettingsRequest) Body(body SetParallelForwardingRequest) ApiChangeParallelForwardingSettingsRequest {
	r.body = &body
	return r
}

func (r ApiChangeParallelForwardingSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangeParallelForwardingSettingsExecute(r)
}

/*
ChangeParallelForwardingSettings Update an existing parallel forwarding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param parallelForwardingId The unique external device identifier
 @return ApiChangeParallelForwardingSettingsRequest

Deprecated
*/
func (a *PhonelinesApiService) ChangeParallelForwardingSettings(ctx context.Context, userId string, phonelineId string, parallelForwardingId string) ApiChangeParallelForwardingSettingsRequest {
	return ApiChangeParallelForwardingSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		parallelForwardingId: parallelForwardingId,
	}
}

// Execute executes the request
// Deprecated
func (a *PhonelinesApiService) ChangeParallelForwardingSettingsExecute(r ApiChangeParallelForwardingSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.ChangeParallelForwardingSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/parallelforwardings/{parallelForwardingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parallelForwardingId"+"}", url.PathEscape(parameterToString(r.parallelForwardingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangePhonelineVoicemailGreetingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
	greetingId string
	body *ChangeVoicemailGreetingRequest
}

func (r ApiChangePhonelineVoicemailGreetingRequest) Body(body ChangeVoicemailGreetingRequest) ApiChangePhonelineVoicemailGreetingRequest {
	r.body = &body
	return r
}

func (r ApiChangePhonelineVoicemailGreetingRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangePhonelineVoicemailGreetingExecute(r)
}

/*
ChangePhonelineVoicemailGreeting Update an existing phone line voicemail greeting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @param greetingId The unique greeting identifier
 @return ApiChangePhonelineVoicemailGreetingRequest
*/
func (a *PhonelinesApiService) ChangePhonelineVoicemailGreeting(ctx context.Context, userId string, phonelineId string, voicemailId string, greetingId string) ApiChangePhonelineVoicemailGreetingRequest {
	return ApiChangePhonelineVoicemailGreetingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
		greetingId: greetingId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) ChangePhonelineVoicemailGreetingExecute(r ApiChangePhonelineVoicemailGreetingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.ChangePhonelineVoicemailGreeting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings/{greetingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"greetingId"+"}", url.PathEscape(parameterToString(r.greetingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangePhonelineVoicemailTranscriptionSettingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
	body *ChangeVoicemailTranscriptionRequest
}

func (r ApiChangePhonelineVoicemailTranscriptionSettingRequest) Body(body ChangeVoicemailTranscriptionRequest) ApiChangePhonelineVoicemailTranscriptionSettingRequest {
	r.body = &body
	return r
}

func (r ApiChangePhonelineVoicemailTranscriptionSettingRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangePhonelineVoicemailTranscriptionSettingExecute(r)
}

/*
ChangePhonelineVoicemailTranscriptionSetting Update an existing phone line voicemail transcription setting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @return ApiChangePhonelineVoicemailTranscriptionSettingRequest
*/
func (a *PhonelinesApiService) ChangePhonelineVoicemailTranscriptionSetting(ctx context.Context, userId string, phonelineId string, voicemailId string) ApiChangePhonelineVoicemailTranscriptionSettingRequest {
	return ApiChangePhonelineVoicemailTranscriptionSettingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) ChangePhonelineVoicemailTranscriptionSettingExecute(r ApiChangePhonelineVoicemailTranscriptionSettingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.ChangePhonelineVoicemailTranscriptionSetting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/transcriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangeVoicemailSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
	body *ChangeVoicemailRequest
}

func (r ApiChangeVoicemailSettingsRequest) Body(body ChangeVoicemailRequest) ApiChangeVoicemailSettingsRequest {
	r.body = &body
	return r
}

func (r ApiChangeVoicemailSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangeVoicemailSettingsExecute(r)
}

/*
ChangeVoicemailSettings Update voicemail settings for a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @return ApiChangeVoicemailSettingsRequest
*/
func (a *PhonelinesApiService) ChangeVoicemailSettings(ctx context.Context, userId string, phonelineId string, voicemailId string) ApiChangeVoicemailSettingsRequest {
	return ApiChangeVoicemailSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) ChangeVoicemailSettingsExecute(r ApiChangeVoicemailSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.ChangeVoicemailSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
}

func (r ApiCreatePhonelineRequest) Execute() (*SimplePhonelineResponse, *http.Response, error) {
	return r.ApiService.CreatePhonelineExecute(r)
}

/*
CreatePhoneline Create a new phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @return ApiCreatePhonelineRequest
*/
func (a *PhonelinesApiService) CreatePhoneline(ctx context.Context, userId string) ApiCreatePhonelineRequest {
	return ApiCreatePhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return SimplePhonelineResponse
func (a *PhonelinesApiService) CreatePhonelineExecute(r ApiCreatePhonelineRequest) (*SimplePhonelineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimplePhonelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.CreatePhoneline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteParallelForwardingSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	parallelForwardingId string
}

func (r ApiDeleteParallelForwardingSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteParallelForwardingSettingsExecute(r)
}

/*
DeleteParallelForwardingSettings Delete parallel forwarding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param parallelForwardingId The unique external device identifier
 @return ApiDeleteParallelForwardingSettingsRequest

Deprecated
*/
func (a *PhonelinesApiService) DeleteParallelForwardingSettings(ctx context.Context, userId string, phonelineId string, parallelForwardingId string) ApiDeleteParallelForwardingSettingsRequest {
	return ApiDeleteParallelForwardingSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		parallelForwardingId: parallelForwardingId,
	}
}

// Execute executes the request
// Deprecated
func (a *PhonelinesApiService) DeleteParallelForwardingSettingsExecute(r ApiDeleteParallelForwardingSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.DeleteParallelForwardingSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/parallelforwardings/{parallelForwardingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parallelForwardingId"+"}", url.PathEscape(parameterToString(r.parallelForwardingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiDeletePhonelineRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePhonelineExecute(r)
}

/*
DeletePhoneline Delete an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiDeletePhonelineRequest
*/
func (a *PhonelinesApiService) DeletePhoneline(ctx context.Context, userId string, phonelineId string) ApiDeletePhonelineRequest {
	return ApiDeletePhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) DeletePhonelineExecute(r ApiDeletePhonelineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.DeletePhoneline")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePhonlineVoicemailGreetingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
	greetingId string
}

func (r ApiDeletePhonlineVoicemailGreetingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePhonlineVoicemailGreetingExecute(r)
}

/*
DeletePhonlineVoicemailGreeting Delete an existing phone line voicemail greeting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @param greetingId The unique greeting identifier
 @return ApiDeletePhonlineVoicemailGreetingRequest
*/
func (a *PhonelinesApiService) DeletePhonlineVoicemailGreeting(ctx context.Context, userId string, phonelineId string, voicemailId string, greetingId string) ApiDeletePhonlineVoicemailGreetingRequest {
	return ApiDeletePhonlineVoicemailGreetingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
		greetingId: greetingId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) DeletePhonlineVoicemailGreetingExecute(r ApiDeletePhonlineVoicemailGreetingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.DeletePhonlineVoicemailGreeting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings/{greetingId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"greetingId"+"}", url.PathEscape(parameterToString(r.greetingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBlockAnonymousSettingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetBlockAnonymousSettingRequest) Execute() (*PhonelineBlockAnonymousResponse, *http.Response, error) {
	return r.ApiService.GetBlockAnonymousSettingExecute(r)
}

/*
GetBlockAnonymousSetting Get the block anonymous setting of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetBlockAnonymousSettingRequest
*/
func (a *PhonelinesApiService) GetBlockAnonymousSetting(ctx context.Context, userId string, phonelineId string) ApiGetBlockAnonymousSettingRequest {
	return ApiGetBlockAnonymousSettingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineBlockAnonymousResponse
func (a *PhonelinesApiService) GetBlockAnonymousSettingExecute(r ApiGetBlockAnonymousSettingRequest) (*PhonelineBlockAnonymousResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineBlockAnonymousResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetBlockAnonymousSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/blockanonymous"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevicesForPhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetDevicesForPhonelineRequest) Execute() (*DevicesResponse, *http.Response, error) {
	return r.ApiService.GetDevicesForPhonelineExecute(r)
}

/*
GetDevicesForPhoneline List all devices of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetDevicesForPhonelineRequest
*/
func (a *PhonelinesApiService) GetDevicesForPhoneline(ctx context.Context, userId string, phonelineId string) ApiGetDevicesForPhonelineRequest {
	return ApiGetDevicesForPhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return DevicesResponse
func (a *PhonelinesApiService) GetDevicesForPhonelineExecute(r ApiGetDevicesForPhonelineRequest) (*DevicesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevicesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetDevicesForPhoneline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetPhonelineRequest) Execute() (*PhonelineResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineExecute(r)
}

/*
GetPhoneline Get a single phoneline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetPhonelineRequest
*/
func (a *PhonelinesApiService) GetPhoneline(ctx context.Context, userId string, phonelineId string) ApiGetPhonelineRequest {
	return ApiGetPhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineResponse
func (a *PhonelinesApiService) GetPhonelineExecute(r ApiGetPhonelineRequest) (*PhonelineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhoneline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineForwardingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetPhonelineForwardingsRequest) Execute() (*ForwardingsResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineForwardingsExecute(r)
}

/*
GetPhonelineForwardings List all forwarding settings of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetPhonelineForwardingsRequest
*/
func (a *PhonelinesApiService) GetPhonelineForwardings(ctx context.Context, userId string, phonelineId string) ApiGetPhonelineForwardingsRequest {
	return ApiGetPhonelineForwardingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return ForwardingsResponse
func (a *PhonelinesApiService) GetPhonelineForwardingsExecute(r ApiGetPhonelineForwardingsRequest) (*ForwardingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForwardingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelineForwardings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/forwardings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineNumbersRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetPhonelineNumbersRequest) Execute() (*EndpointNumbersResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineNumbersExecute(r)
}

/*
GetPhonelineNumbers List all phone numbers routed to phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetPhonelineNumbersRequest
*/
func (a *PhonelinesApiService) GetPhonelineNumbers(ctx context.Context, userId string, phonelineId string) ApiGetPhonelineNumbersRequest {
	return ApiGetPhonelineNumbersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return EndpointNumbersResponse
func (a *PhonelinesApiService) GetPhonelineNumbersExecute(r ApiGetPhonelineNumbersRequest) (*EndpointNumbersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EndpointNumbersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelineNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/numbers"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineParallelForwardingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetPhonelineParallelForwardingsRequest) Execute() (*ParallelForwardingsResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineParallelForwardingsExecute(r)
}

/*
GetPhonelineParallelForwardings List all parallel forwardings of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetPhonelineParallelForwardingsRequest

Deprecated
*/
func (a *PhonelinesApiService) GetPhonelineParallelForwardings(ctx context.Context, userId string, phonelineId string) ApiGetPhonelineParallelForwardingsRequest {
	return ApiGetPhonelineParallelForwardingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return ParallelForwardingsResponse
// Deprecated
func (a *PhonelinesApiService) GetPhonelineParallelForwardingsExecute(r ApiGetPhonelineParallelForwardingsRequest) (*ParallelForwardingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ParallelForwardingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelineParallelForwardings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/parallelforwardings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineVoicemailGreetingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	voicemailId string
}

func (r ApiGetPhonelineVoicemailGreetingsRequest) Execute() (*GreetingsResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineVoicemailGreetingsExecute(r)
}

/*
GetPhonelineVoicemailGreetings List all greetings for a specific phone line voicemail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param voicemailId The unique voicemail identifier
 @return ApiGetPhonelineVoicemailGreetingsRequest
*/
func (a *PhonelinesApiService) GetPhonelineVoicemailGreetings(ctx context.Context, userId string, phonelineId string, voicemailId string) ApiGetPhonelineVoicemailGreetingsRequest {
	return ApiGetPhonelineVoicemailGreetingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		voicemailId: voicemailId,
	}
}

// Execute executes the request
//  @return GreetingsResponse
func (a *PhonelinesApiService) GetPhonelineVoicemailGreetingsExecute(r ApiGetPhonelineVoicemailGreetingsRequest) (*GreetingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GreetingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelineVoicemailGreetings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"voicemailId"+"}", url.PathEscape(parameterToString(r.voicemailId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelineVoicemailsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetPhonelineVoicemailsRequest) Execute() (*PhonelineVoicemailsResponse, *http.Response, error) {
	return r.ApiService.GetPhonelineVoicemailsExecute(r)
}

/*
GetPhonelineVoicemails List all voicemails of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetPhonelineVoicemailsRequest

Deprecated
*/
func (a *PhonelinesApiService) GetPhonelineVoicemails(ctx context.Context, userId string, phonelineId string) ApiGetPhonelineVoicemailsRequest {
	return ApiGetPhonelineVoicemailsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineVoicemailsResponse
// Deprecated
func (a *PhonelinesApiService) GetPhonelineVoicemailsExecute(r ApiGetPhonelineVoicemailsRequest) (*PhonelineVoicemailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineVoicemailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelineVoicemails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/voicemails"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhonelinesRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
}

func (r ApiGetPhonelinesRequest) Execute() (*SimplePhonelinesResponse, *http.Response, error) {
	return r.ApiService.GetPhonelinesExecute(r)
}

/*
GetPhonelines List all phone lines

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @return ApiGetPhonelinesRequest
*/
func (a *PhonelinesApiService) GetPhonelines(ctx context.Context, userId string) ApiGetPhonelinesRequest {
	return ApiGetPhonelinesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return SimplePhonelinesResponse
func (a *PhonelinesApiService) GetPhonelinesExecute(r ApiGetPhonelinesRequest) (*SimplePhonelinesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimplePhonelinesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetPhonelines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSipgateIoLogsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetSipgateIoLogsRequest) Execute() (*PhonelineSipgateIoLogsResponse, *http.Response, error) {
	return r.ApiService.GetSipgateIoLogsExecute(r)
}

/*
GetSipgateIoLogs List sipgate.io debug log for a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetSipgateIoLogsRequest
*/
func (a *PhonelinesApiService) GetSipgateIoLogs(ctx context.Context, userId string, phonelineId string) ApiGetSipgateIoLogsRequest {
	return ApiGetSipgateIoLogsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineSipgateIoLogsResponse
func (a *PhonelinesApiService) GetSipgateIoLogsExecute(r ApiGetSipgateIoLogsRequest) (*PhonelineSipgateIoLogsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineSipgateIoLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetSipgateIoLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/sipgateio/log"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSipgateIoSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
}

func (r ApiGetSipgateIoSettingsRequest) Execute() (*PhonelineSipgateIoResponse, *http.Response, error) {
	return r.ApiService.GetSipgateIoSettingsExecute(r)
}

/*
GetSipgateIoSettings List sipgate.io settings of a specific phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiGetSipgateIoSettingsRequest
*/
func (a *PhonelinesApiService) GetSipgateIoSettings(ctx context.Context, userId string, phonelineId string) ApiGetSipgateIoSettingsRequest {
	return ApiGetSipgateIoSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineSipgateIoResponse
func (a *PhonelinesApiService) GetSipgateIoSettingsExecute(r ApiGetSipgateIoSettingsRequest) (*PhonelineSipgateIoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineSipgateIoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.GetSipgateIoSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/sipgateio"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDeviceFromPhonelineRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	deviceId string
}

func (r ApiRemoveDeviceFromPhonelineRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveDeviceFromPhonelineExecute(r)
}

/*
RemoveDeviceFromPhoneline Remove device from phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @param deviceId The unique device identifier
 @return ApiRemoveDeviceFromPhonelineRequest
*/
func (a *PhonelinesApiService) RemoveDeviceFromPhoneline(ctx context.Context, userId string, phonelineId string, deviceId string) ApiRemoveDeviceFromPhonelineRequest {
	return ApiRemoveDeviceFromPhonelineRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
		deviceId: deviceId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) RemoveDeviceFromPhonelineExecute(r ApiRemoveDeviceFromPhonelineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.RemoveDeviceFromPhoneline")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/devices/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetBlockAnonymousSettingRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *SetBlockAnonymousSettingsRequest
}

func (r ApiSetBlockAnonymousSettingRequest) Body(body SetBlockAnonymousSettingsRequest) ApiSetBlockAnonymousSettingRequest {
	r.body = &body
	return r
}

func (r ApiSetBlockAnonymousSettingRequest) Execute() (*PhonelineBlockAnonymousResponse, *http.Response, error) {
	return r.ApiService.SetBlockAnonymousSettingExecute(r)
}

/*
SetBlockAnonymousSetting Update the block anonymous setting for an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiSetBlockAnonymousSettingRequest
*/
func (a *PhonelinesApiService) SetBlockAnonymousSetting(ctx context.Context, userId string, phonelineId string) ApiSetBlockAnonymousSettingRequest {
	return ApiSetBlockAnonymousSettingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
//  @return PhonelineBlockAnonymousResponse
func (a *PhonelinesApiService) SetBlockAnonymousSettingExecute(r ApiSetBlockAnonymousSettingRequest) (*PhonelineBlockAnonymousResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhonelineBlockAnonymousResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.SetBlockAnonymousSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/blockanonymous"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetPhonelineAliasRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *SetAliasRequest
}

func (r ApiSetPhonelineAliasRequest) Body(body SetAliasRequest) ApiSetPhonelineAliasRequest {
	r.body = &body
	return r
}

func (r ApiSetPhonelineAliasRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetPhonelineAliasExecute(r)
}

/*
SetPhonelineAlias Update alias for an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiSetPhonelineAliasRequest
*/
func (a *PhonelinesApiService) SetPhonelineAlias(ctx context.Context, userId string, phonelineId string) ApiSetPhonelineAliasRequest {
	return ApiSetPhonelineAliasRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) SetPhonelineAliasExecute(r ApiSetPhonelineAliasRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.SetPhonelineAlias")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetPhonelineForwardingSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *SetForwardingsRequest
}

func (r ApiSetPhonelineForwardingSettingsRequest) Body(body SetForwardingsRequest) ApiSetPhonelineForwardingSettingsRequest {
	r.body = &body
	return r
}

func (r ApiSetPhonelineForwardingSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetPhonelineForwardingSettingsExecute(r)
}

/*
SetPhonelineForwardingSettings Update forwarding settings for an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiSetPhonelineForwardingSettingsRequest
*/
func (a *PhonelinesApiService) SetPhonelineForwardingSettings(ctx context.Context, userId string, phonelineId string) ApiSetPhonelineForwardingSettingsRequest {
	return ApiSetPhonelineForwardingSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) SetPhonelineForwardingSettingsExecute(r ApiSetPhonelineForwardingSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.SetPhonelineForwardingSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/forwardings"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetSipgateIoSettingsRequest struct {
	ctx context.Context
	ApiService *PhonelinesApiService
	userId string
	phonelineId string
	body *SetSipgateIoPhonelineSettingsRequest
}

func (r ApiSetSipgateIoSettingsRequest) Body(body SetSipgateIoPhonelineSettingsRequest) ApiSetSipgateIoSettingsRequest {
	r.body = &body
	return r
}

func (r ApiSetSipgateIoSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetSipgateIoSettingsExecute(r)
}

/*
SetSipgateIoSettings Update sipgate.io settings for an existing phone line

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @param phonelineId The unique phone line identifier
 @return ApiSetSipgateIoSettingsRequest
*/
func (a *PhonelinesApiService) SetSipgateIoSettings(ctx context.Context, userId string, phonelineId string) ApiSetSipgateIoSettingsRequest {
	return ApiSetSipgateIoSettingsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		phonelineId: phonelineId,
	}
}

// Execute executes the request
func (a *PhonelinesApiService) SetSipgateIoSettingsExecute(r ApiSetSipgateIoSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhonelinesApiService.SetSipgateIoSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/phonelines/{phonelineId}/sipgateio"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phonelineId"+"}", url.PathEscape(parameterToString(r.phonelineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
