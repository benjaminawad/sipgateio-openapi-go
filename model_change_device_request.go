/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChangeDeviceRequest struct for ChangeDeviceRequest
type ChangeDeviceRequest struct {
	Dnd *bool `json:"dnd,omitempty"`
	EmergencyAddressId *int32 `json:"emergencyAddressId,omitempty"`
}

// NewChangeDeviceRequest instantiates a new ChangeDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeDeviceRequest() *ChangeDeviceRequest {
	this := ChangeDeviceRequest{}
	var dnd bool = false
	this.Dnd = &dnd
	return &this
}

// NewChangeDeviceRequestWithDefaults instantiates a new ChangeDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeDeviceRequestWithDefaults() *ChangeDeviceRequest {
	this := ChangeDeviceRequest{}
	var dnd bool = false
	this.Dnd = &dnd
	return &this
}

// GetDnd returns the Dnd field value if set, zero value otherwise.
func (o *ChangeDeviceRequest) GetDnd() bool {
	if o == nil || o.Dnd == nil {
		var ret bool
		return ret
	}
	return *o.Dnd
}

// GetDndOk returns a tuple with the Dnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDeviceRequest) GetDndOk() (*bool, bool) {
	if o == nil || o.Dnd == nil {
		return nil, false
	}
	return o.Dnd, true
}

// HasDnd returns a boolean if a field has been set.
func (o *ChangeDeviceRequest) HasDnd() bool {
	if o != nil && o.Dnd != nil {
		return true
	}

	return false
}

// SetDnd gets a reference to the given bool and assigns it to the Dnd field.
func (o *ChangeDeviceRequest) SetDnd(v bool) {
	o.Dnd = &v
}

// GetEmergencyAddressId returns the EmergencyAddressId field value if set, zero value otherwise.
func (o *ChangeDeviceRequest) GetEmergencyAddressId() int32 {
	if o == nil || o.EmergencyAddressId == nil {
		var ret int32
		return ret
	}
	return *o.EmergencyAddressId
}

// GetEmergencyAddressIdOk returns a tuple with the EmergencyAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeDeviceRequest) GetEmergencyAddressIdOk() (*int32, bool) {
	if o == nil || o.EmergencyAddressId == nil {
		return nil, false
	}
	return o.EmergencyAddressId, true
}

// HasEmergencyAddressId returns a boolean if a field has been set.
func (o *ChangeDeviceRequest) HasEmergencyAddressId() bool {
	if o != nil && o.EmergencyAddressId != nil {
		return true
	}

	return false
}

// SetEmergencyAddressId gets a reference to the given int32 and assigns it to the EmergencyAddressId field.
func (o *ChangeDeviceRequest) SetEmergencyAddressId(v int32) {
	o.EmergencyAddressId = &v
}

func (o ChangeDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dnd != nil {
		toSerialize["dnd"] = o.Dnd
	}
	if o.EmergencyAddressId != nil {
		toSerialize["emergencyAddressId"] = o.EmergencyAddressId
	}
	return json.Marshal(toSerialize)
}

type NullableChangeDeviceRequest struct {
	value *ChangeDeviceRequest
	isSet bool
}

func (v NullableChangeDeviceRequest) Get() *ChangeDeviceRequest {
	return v.value
}

func (v *NullableChangeDeviceRequest) Set(val *ChangeDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeDeviceRequest(val *ChangeDeviceRequest) *NullableChangeDeviceRequest {
	return &NullableChangeDeviceRequest{value: val, isSet: true}
}

func (v NullableChangeDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


