/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateHistoryEntryRequest struct for UpdateHistoryEntryRequest
type UpdateHistoryEntryRequest struct {
	Note *string `json:"note,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	Read *bool `json:"read,omitempty"`
	Starred *bool `json:"starred,omitempty"`
}

// NewUpdateHistoryEntryRequest instantiates a new UpdateHistoryEntryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHistoryEntryRequest() *UpdateHistoryEntryRequest {
	this := UpdateHistoryEntryRequest{}
	var archived bool = false
	this.Archived = &archived
	var read bool = false
	this.Read = &read
	var starred bool = false
	this.Starred = &starred
	return &this
}

// NewUpdateHistoryEntryRequestWithDefaults instantiates a new UpdateHistoryEntryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHistoryEntryRequestWithDefaults() *UpdateHistoryEntryRequest {
	this := UpdateHistoryEntryRequest{}
	var archived bool = false
	this.Archived = &archived
	var read bool = false
	this.Read = &read
	var starred bool = false
	this.Starred = &starred
	return &this
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *UpdateHistoryEntryRequest) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHistoryEntryRequest) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *UpdateHistoryEntryRequest) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *UpdateHistoryEntryRequest) SetNote(v string) {
	o.Note = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UpdateHistoryEntryRequest) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHistoryEntryRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UpdateHistoryEntryRequest) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *UpdateHistoryEntryRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *UpdateHistoryEntryRequest) GetRead() bool {
	if o == nil || o.Read == nil {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHistoryEntryRequest) GetReadOk() (*bool, bool) {
	if o == nil || o.Read == nil {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *UpdateHistoryEntryRequest) HasRead() bool {
	if o != nil && o.Read != nil {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *UpdateHistoryEntryRequest) SetRead(v bool) {
	o.Read = &v
}

// GetStarred returns the Starred field value if set, zero value otherwise.
func (o *UpdateHistoryEntryRequest) GetStarred() bool {
	if o == nil || o.Starred == nil {
		var ret bool
		return ret
	}
	return *o.Starred
}

// GetStarredOk returns a tuple with the Starred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHistoryEntryRequest) GetStarredOk() (*bool, bool) {
	if o == nil || o.Starred == nil {
		return nil, false
	}
	return o.Starred, true
}

// HasStarred returns a boolean if a field has been set.
func (o *UpdateHistoryEntryRequest) HasStarred() bool {
	if o != nil && o.Starred != nil {
		return true
	}

	return false
}

// SetStarred gets a reference to the given bool and assigns it to the Starred field.
func (o *UpdateHistoryEntryRequest) SetStarred(v bool) {
	o.Starred = &v
}

func (o UpdateHistoryEntryRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.Read != nil {
		toSerialize["read"] = o.Read
	}
	if o.Starred != nil {
		toSerialize["starred"] = o.Starred
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateHistoryEntryRequest struct {
	value *UpdateHistoryEntryRequest
	isSet bool
}

func (v NullableUpdateHistoryEntryRequest) Get() *UpdateHistoryEntryRequest {
	return v.value
}

func (v *NullableUpdateHistoryEntryRequest) Set(val *UpdateHistoryEntryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateHistoryEntryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateHistoryEntryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateHistoryEntryRequest(val *UpdateHistoryEntryRequest) *NullableUpdateHistoryEntryRequest {
	return &NullableUpdateHistoryEntryRequest{value: val, isSet: true}
}

func (v NullableUpdateHistoryEntryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateHistoryEntryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


