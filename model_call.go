/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Call struct for Call
type Call struct {
	// The unique call identifier
	CallId string `json:"callId"`
	// The call is muted
	Muted bool `json:"muted"`
	// The call is being recorded
	Recording bool `json:"recording"`
	// The call is on hold
	Hold bool `json:"hold"`
	Participants []Participant `json:"participants"`
}

// NewCall instantiates a new Call object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCall(callId string, muted bool, recording bool, hold bool, participants []Participant) *Call {
	this := Call{}
	this.CallId = callId
	this.Muted = muted
	this.Recording = recording
	this.Hold = hold
	this.Participants = participants
	return &this
}

// NewCallWithDefaults instantiates a new Call object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallWithDefaults() *Call {
	this := Call{}
	return &this
}

// GetCallId returns the CallId field value
func (o *Call) GetCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *Call) GetCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *Call) SetCallId(v string) {
	o.CallId = v
}

// GetMuted returns the Muted field value
func (o *Call) GetMuted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Muted
}

// GetMutedOk returns a tuple with the Muted field value
// and a boolean to check if the value has been set.
func (o *Call) GetMutedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Muted, true
}

// SetMuted sets field value
func (o *Call) SetMuted(v bool) {
	o.Muted = v
}

// GetRecording returns the Recording field value
func (o *Call) GetRecording() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recording
}

// GetRecordingOk returns a tuple with the Recording field value
// and a boolean to check if the value has been set.
func (o *Call) GetRecordingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recording, true
}

// SetRecording sets field value
func (o *Call) SetRecording(v bool) {
	o.Recording = v
}

// GetHold returns the Hold field value
func (o *Call) GetHold() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hold
}

// GetHoldOk returns a tuple with the Hold field value
// and a boolean to check if the value has been set.
func (o *Call) GetHoldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hold, true
}

// SetHold sets field value
func (o *Call) SetHold(v bool) {
	o.Hold = v
}

// GetParticipants returns the Participants field value
func (o *Call) GetParticipants() []Participant {
	if o == nil {
		var ret []Participant
		return ret
	}

	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value
// and a boolean to check if the value has been set.
func (o *Call) GetParticipantsOk() ([]Participant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Participants, true
}

// SetParticipants sets field value
func (o *Call) SetParticipants(v []Participant) {
	o.Participants = v
}

func (o Call) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["callId"] = o.CallId
	}
	if true {
		toSerialize["muted"] = o.Muted
	}
	if true {
		toSerialize["recording"] = o.Recording
	}
	if true {
		toSerialize["hold"] = o.Hold
	}
	if true {
		toSerialize["participants"] = o.Participants
	}
	return json.Marshal(toSerialize)
}

type NullableCall struct {
	value *Call
	isSet bool
}

func (v NullableCall) Get() *Call {
	return v.value
}

func (v *NullableCall) Set(val *Call) {
	v.value = val
	v.isSet = true
}

func (v NullableCall) IsSet() bool {
	return v.isSet
}

func (v *NullableCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCall(val *Call) *NullableCall {
	return &NullableCall{value: val, isSet: true}
}

func (v NullableCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


