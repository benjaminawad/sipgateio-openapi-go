/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NumberResponse struct for NumberResponse
type NumberResponse struct {
	Number *string `json:"number,omitempty"`
	Type []string `json:"type,omitempty"`
}

// NewNumberResponse instantiates a new NumberResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberResponse() *NumberResponse {
	this := NumberResponse{}
	return &this
}

// NewNumberResponseWithDefaults instantiates a new NumberResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberResponseWithDefaults() *NumberResponse {
	this := NumberResponse{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *NumberResponse) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberResponse) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *NumberResponse) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *NumberResponse) SetNumber(v string) {
	o.Number = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NumberResponse) GetType() []string {
	if o == nil || o.Type == nil {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberResponse) GetTypeOk() ([]string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NumberResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *NumberResponse) SetType(v []string) {
	o.Type = v
}

func (o NumberResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNumberResponse struct {
	value *NumberResponse
	isSet bool
}

func (v NullableNumberResponse) Get() *NumberResponse {
	return v.value
}

func (v *NullableNumberResponse) Set(val *NumberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberResponse(val *NumberResponse) *NullableNumberResponse {
	return &NullableNumberResponse{value: val, isSet: true}
}

func (v NullableNumberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


