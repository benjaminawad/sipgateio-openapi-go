/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PortingResponse struct for PortingResponse
type PortingResponse struct {
	Id *string `json:"id,omitempty"`
	PortDate *string `json:"portDate,omitempty"`
	Numbers []PortingNumberResponse `json:"numbers,omitempty"`
	Status *int32 `json:"status,omitempty"`
	Revocable *bool `json:"revocable,omitempty"`
	Pending *bool `json:"pending,omitempty"`
}

// NewPortingResponse instantiates a new PortingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortingResponse() *PortingResponse {
	this := PortingResponse{}
	var revocable bool = false
	this.Revocable = &revocable
	var pending bool = false
	this.Pending = &pending
	return &this
}

// NewPortingResponseWithDefaults instantiates a new PortingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortingResponseWithDefaults() *PortingResponse {
	this := PortingResponse{}
	var revocable bool = false
	this.Revocable = &revocable
	var pending bool = false
	this.Pending = &pending
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortingResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortingResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortingResponse) SetId(v string) {
	o.Id = &v
}

// GetPortDate returns the PortDate field value if set, zero value otherwise.
func (o *PortingResponse) GetPortDate() string {
	if o == nil || o.PortDate == nil {
		var ret string
		return ret
	}
	return *o.PortDate
}

// GetPortDateOk returns a tuple with the PortDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetPortDateOk() (*string, bool) {
	if o == nil || o.PortDate == nil {
		return nil, false
	}
	return o.PortDate, true
}

// HasPortDate returns a boolean if a field has been set.
func (o *PortingResponse) HasPortDate() bool {
	if o != nil && o.PortDate != nil {
		return true
	}

	return false
}

// SetPortDate gets a reference to the given string and assigns it to the PortDate field.
func (o *PortingResponse) SetPortDate(v string) {
	o.PortDate = &v
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *PortingResponse) GetNumbers() []PortingNumberResponse {
	if o == nil || o.Numbers == nil {
		var ret []PortingNumberResponse
		return ret
	}
	return o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetNumbersOk() ([]PortingNumberResponse, bool) {
	if o == nil || o.Numbers == nil {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *PortingResponse) HasNumbers() bool {
	if o != nil && o.Numbers != nil {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given []PortingNumberResponse and assigns it to the Numbers field.
func (o *PortingResponse) SetNumbers(v []PortingNumberResponse) {
	o.Numbers = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PortingResponse) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PortingResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *PortingResponse) SetStatus(v int32) {
	o.Status = &v
}

// GetRevocable returns the Revocable field value if set, zero value otherwise.
func (o *PortingResponse) GetRevocable() bool {
	if o == nil || o.Revocable == nil {
		var ret bool
		return ret
	}
	return *o.Revocable
}

// GetRevocableOk returns a tuple with the Revocable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetRevocableOk() (*bool, bool) {
	if o == nil || o.Revocable == nil {
		return nil, false
	}
	return o.Revocable, true
}

// HasRevocable returns a boolean if a field has been set.
func (o *PortingResponse) HasRevocable() bool {
	if o != nil && o.Revocable != nil {
		return true
	}

	return false
}

// SetRevocable gets a reference to the given bool and assigns it to the Revocable field.
func (o *PortingResponse) SetRevocable(v bool) {
	o.Revocable = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *PortingResponse) GetPending() bool {
	if o == nil || o.Pending == nil {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingResponse) GetPendingOk() (*bool, bool) {
	if o == nil || o.Pending == nil {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *PortingResponse) HasPending() bool {
	if o != nil && o.Pending != nil {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *PortingResponse) SetPending(v bool) {
	o.Pending = &v
}

func (o PortingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PortDate != nil {
		toSerialize["portDate"] = o.PortDate
	}
	if o.Numbers != nil {
		toSerialize["numbers"] = o.Numbers
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Revocable != nil {
		toSerialize["revocable"] = o.Revocable
	}
	if o.Pending != nil {
		toSerialize["pending"] = o.Pending
	}
	return json.Marshal(toSerialize)
}

type NullablePortingResponse struct {
	value *PortingResponse
	isSet bool
}

func (v NullablePortingResponse) Get() *PortingResponse {
	return v.value
}

func (v *NullablePortingResponse) Set(val *PortingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingResponse(val *PortingResponse) *NullablePortingResponse {
	return &NullablePortingResponse{value: val, isSet: true}
}

func (v NullablePortingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


