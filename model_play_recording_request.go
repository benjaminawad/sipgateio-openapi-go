/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlayRecordingRequest struct for PlayRecordingRequest
type PlayRecordingRequest struct {
	DeviceId *string `json:"deviceId,omitempty"`
	DatadId *string `json:"datadId,omitempty"`
}

// NewPlayRecordingRequest instantiates a new PlayRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayRecordingRequest() *PlayRecordingRequest {
	this := PlayRecordingRequest{}
	return &this
}

// NewPlayRecordingRequestWithDefaults instantiates a new PlayRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayRecordingRequestWithDefaults() *PlayRecordingRequest {
	this := PlayRecordingRequest{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PlayRecordingRequest) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRecordingRequest) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PlayRecordingRequest) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *PlayRecordingRequest) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDatadId returns the DatadId field value if set, zero value otherwise.
func (o *PlayRecordingRequest) GetDatadId() string {
	if o == nil || o.DatadId == nil {
		var ret string
		return ret
	}
	return *o.DatadId
}

// GetDatadIdOk returns a tuple with the DatadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayRecordingRequest) GetDatadIdOk() (*string, bool) {
	if o == nil || o.DatadId == nil {
		return nil, false
	}
	return o.DatadId, true
}

// HasDatadId returns a boolean if a field has been set.
func (o *PlayRecordingRequest) HasDatadId() bool {
	if o != nil && o.DatadId != nil {
		return true
	}

	return false
}

// SetDatadId gets a reference to the given string and assigns it to the DatadId field.
func (o *PlayRecordingRequest) SetDatadId(v string) {
	o.DatadId = &v
}

func (o PlayRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.DatadId != nil {
		toSerialize["datadId"] = o.DatadId
	}
	return json.Marshal(toSerialize)
}

type NullablePlayRecordingRequest struct {
	value *PlayRecordingRequest
	isSet bool
}

func (v NullablePlayRecordingRequest) Get() *PlayRecordingRequest {
	return v.value
}

func (v *NullablePlayRecordingRequest) Set(val *PlayRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayRecordingRequest(val *PlayRecordingRequest) *NullablePlayRecordingRequest {
	return &NullablePlayRecordingRequest{value: val, isSet: true}
}

func (v NullablePlayRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


