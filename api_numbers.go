/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// NumbersApiService NumbersApi service
type NumbersApiService service

type ApiAddQuickDialNumberRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	body *AddDirectDialRequest
}

func (r ApiAddQuickDialNumberRequest) Body(body AddDirectDialRequest) ApiAddQuickDialNumberRequest {
	r.body = &body
	return r
}

func (r ApiAddQuickDialNumberRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddQuickDialNumberExecute(r)
}

/*
AddQuickDialNumber Add a new quick dial number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddQuickDialNumberRequest
*/
func (a *NumbersApiService) AddQuickDialNumber(ctx context.Context) ApiAddQuickDialNumberRequest {
	return ApiAddQuickDialNumberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *NumbersApiService) AddQuickDialNumberExecute(r ApiAddQuickDialNumberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.AddQuickDialNumber")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers/quickdial"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangeNumberSettingsRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	numberId string
	body *ChangeNumberSettingsRequest
}

func (r ApiChangeNumberSettingsRequest) Body(body ChangeNumberSettingsRequest) ApiChangeNumberSettingsRequest {
	r.body = &body
	return r
}

func (r ApiChangeNumberSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangeNumberSettingsExecute(r)
}

/*
ChangeNumberSettings Change phone number settings, e.g. route to endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberId The unique phone number identifier
 @return ApiChangeNumberSettingsRequest
*/
func (a *NumbersApiService) ChangeNumberSettings(ctx context.Context, numberId string) ApiChangeNumberSettingsRequest {
	return ApiChangeNumberSettingsRequest{
		ApiService: a,
		ctx: ctx,
		numberId: numberId,
	}
}

// Execute executes the request
func (a *NumbersApiService) ChangeNumberSettingsExecute(r ApiChangeNumberSettingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.ChangeNumberSettings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers/{numberId}"
	localVarPath = strings.Replace(localVarPath, "{"+"numberId"+"}", url.PathEscape(parameterToString(r.numberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChangeQuickDialNumberRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	numberId string
	body *ChangeDirectDialRequest
}

func (r ApiChangeQuickDialNumberRequest) Body(body ChangeDirectDialRequest) ApiChangeQuickDialNumberRequest {
	r.body = &body
	return r
}

func (r ApiChangeQuickDialNumberRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangeQuickDialNumberExecute(r)
}

/*
ChangeQuickDialNumber Update an existing quick dial number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberId
 @return ApiChangeQuickDialNumberRequest
*/
func (a *NumbersApiService) ChangeQuickDialNumber(ctx context.Context, numberId string) ApiChangeQuickDialNumberRequest {
	return ApiChangeQuickDialNumberRequest{
		ApiService: a,
		ctx: ctx,
		numberId: numberId,
	}
}

// Execute executes the request
func (a *NumbersApiService) ChangeQuickDialNumberExecute(r ApiChangeQuickDialNumberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.ChangeQuickDialNumber")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers/quickdial/{numberId}"
	localVarPath = strings.Replace(localVarPath, "{"+"numberId"+"}", url.PathEscape(parameterToString(r.numberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteQuickDialNumberRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	numberId string
}

func (r ApiDeleteQuickDialNumberRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteQuickDialNumberExecute(r)
}

/*
DeleteQuickDialNumber Delete an existing quick dial number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberId The unique quick dial number identifier
 @return ApiDeleteQuickDialNumberRequest
*/
func (a *NumbersApiService) DeleteQuickDialNumber(ctx context.Context, numberId string) ApiDeleteQuickDialNumberRequest {
	return ApiDeleteQuickDialNumberRequest{
		ApiService: a,
		ctx: ctx,
		numberId: numberId,
	}
}

// Execute executes the request
func (a *NumbersApiService) DeleteQuickDialNumberExecute(r ApiDeleteQuickDialNumberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.DeleteQuickDialNumber")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers/quickdial/{numberId}"
	localVarPath = strings.Replace(localVarPath, "{"+"numberId"+"}", url.PathEscape(parameterToString(r.numberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNumbersRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	offset *int32
	limit *int32
}

func (r ApiGetNumbersRequest) Offset(offset int32) ApiGetNumbersRequest {
	r.offset = &offset
	return r
}

func (r ApiGetNumbersRequest) Limit(limit int32) ApiGetNumbersRequest {
	r.limit = &limit
	return r
}

func (r ApiGetNumbersRequest) Execute() (*NumbersResponse, *http.Response, error) {
	return r.ApiService.GetNumbersExecute(r)
}

/*
GetNumbers List all phone numbers

Possible portState->status codes:<br /><pre>100: Waiting for user fax
150: WBCI waiting for mail opt-in
160: WBCI opt-in hash generated
170: WBCI opt-in link clicked
200: Waiting for fax from current network operator
250: WBCI send
251: WBCI network error
252: WBCI EKP rejected
400: Porting accepted
450: Waiting for data exchange
451: Data exchange error
500: Porting complete
600: Porting cancelled
</pre>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNumbersRequest
*/
func (a *NumbersApiService) GetNumbers(ctx context.Context) ApiGetNumbersRequest {
	return ApiGetNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NumbersResponse
func (a *NumbersApiService) GetNumbersExecute(r ApiGetNumbersRequest) (*NumbersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumbersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.GetNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserNumbersRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	userId string
}

func (r ApiGetUserNumbersRequest) Execute() (*NumbersResponse, *http.Response, error) {
	return r.ApiService.GetUserNumbersExecute(r)
}

/*
GetUserNumbers List all user phone numbers of a specific user

Possible portState->status codes:<br /><pre>100: Waiting for user fax
150: WBCI waiting for mail opt-in
160: WBCI opt-in hash generated
170: WBCI opt-in link clicked
200: Waiting for fax from current network operator
250: WBCI send
251: WBCI network error
252: WBCI EKP rejected
400: Porting accepted
450: Waiting for data exchange
451: Data exchange error
500: Porting complete
600: Porting cancelled
</pre>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId The unique user identifier
 @return ApiGetUserNumbersRequest
*/
func (a *NumbersApiService) GetUserNumbers(ctx context.Context, userId string) ApiGetUserNumbersRequest {
	return ApiGetUserNumbersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return NumbersResponse
func (a *NumbersApiService) GetUserNumbersExecute(r ApiGetUserNumbersRequest) (*NumbersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumbersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.GetUserNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{userId}/numbers"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateQuickDialNumberRequest struct {
	ctx context.Context
	ApiService *NumbersApiService
	quickDialNumber string
}

func (r ApiValidateQuickDialNumberRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidateQuickDialNumberExecute(r)
}

/*
ValidateQuickDialNumber Check if quick dial number is already taken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param quickDialNumber The quick dial number
 @return ApiValidateQuickDialNumberRequest
*/
func (a *NumbersApiService) ValidateQuickDialNumber(ctx context.Context, quickDialNumber string) ApiValidateQuickDialNumberRequest {
	return ApiValidateQuickDialNumberRequest{
		ApiService: a,
		ctx: ctx,
		quickDialNumber: quickDialNumber,
	}
}

// Execute executes the request
func (a *NumbersApiService) ValidateQuickDialNumberExecute(r ApiValidateQuickDialNumberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumbersApiService.ValidateQuickDialNumber")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/numbers/quickdial/validation/{quickDialNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"quickDialNumber"+"}", url.PathEscape(parameterToString(r.quickDialNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
