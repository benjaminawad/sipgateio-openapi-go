/*
sipgate API

This is the sipgate REST API documentation. We build our applications on this API and we invite you to use it too.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EndpointResponse struct for EndpointResponse
type EndpointResponse struct {
	Extension *string `json:"extension,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewEndpointResponse instantiates a new EndpointResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointResponse() *EndpointResponse {
	this := EndpointResponse{}
	return &this
}

// NewEndpointResponseWithDefaults instantiates a new EndpointResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointResponseWithDefaults() *EndpointResponse {
	this := EndpointResponse{}
	return &this
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *EndpointResponse) GetExtension() string {
	if o == nil || o.Extension == nil {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetExtensionOk() (*string, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *EndpointResponse) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *EndpointResponse) SetExtension(v string) {
	o.Extension = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EndpointResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EndpointResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EndpointResponse) SetType(v string) {
	o.Type = &v
}

func (o EndpointResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEndpointResponse struct {
	value *EndpointResponse
	isSet bool
}

func (v NullableEndpointResponse) Get() *EndpointResponse {
	return v.value
}

func (v *NullableEndpointResponse) Set(val *EndpointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointResponse(val *EndpointResponse) *NullableEndpointResponse {
	return &NullableEndpointResponse{value: val, isSet: true}
}

func (v NullableEndpointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


